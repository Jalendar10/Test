package com.example.rulesapp.controller;

import com.example.rulesapp.model.ApplicationData;
import com.example.rulesapp.model.FieldDefinition;
import com.example.rulesapp.model.RuleDefinition; // Import RuleDefinition
import com.example.rulesapp.model.RuleResult;
import com.example.rulesapp.service.DataService;
import com.example.rulesapp.service.RulesEngineService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.HashMap;
import java.util.List; // Import List
import java.util.Map;

@Controller
public class HomeController {

    private final DataService dataService;
    private final RulesEngineService rulesEngineService;

    public HomeController(DataService dataService, RulesEngineService rulesEngineService) {
        this.dataService = dataService;
        this.rulesEngineService = rulesEngineService;
    }

    /**
     * Renders home page with:
     * - A list of existing Applications
     * - A form to create a new Application (prepopulated with default values)
     */
    @GetMapping({"/", "/home"})
    public String home(Model model) {
        // List all applications
        model.addAttribute("applications", dataService.getAllApplications());

        // List all fields
        List<FieldDefinition> fields = dataService.getAllFields();
        model.addAttribute("fields", fields);

        // Build a map of fieldName -> defaultValue (for display in the form)
        Map<String, String> fieldNameToDefault = new HashMap<>();
        for (FieldDefinition fd : fields) {
            fieldNameToDefault.put(fd.getFieldName(),
                    fd.getDefaultValue() == null ? "" : fd.getDefaultValue());
        }
        model.addAttribute("fieldMap", fieldNameToDefault);

        return "home";
    }

    /**
     * Processes the creation of a new Application.
     * Builds an ApplicationData from the submitted field values.
     * Immediately runs all rules and saves a final decision.
     */
    @PostMapping("/submitApplication")
    public String submitApplication(
            @RequestParam("fieldNames") String[] fieldNames,
            @RequestParam("fieldValues") String[] fieldValues
    ) {
        // Construct map of fieldName -> value
        Map<String, String> appFieldMap = new HashMap<>();
        for (int i = 0; i < fieldNames.length; i++) {
            appFieldMap.put(fieldNames[i], fieldValues[i]);
        }

        // Create and save the new application
        ApplicationData applicationData = new ApplicationData(appFieldMap);
        applicationData = dataService.saveApplicationData(applicationData);

        // Evaluate rules right away (optional)
        List<RuleDefinition> allRules = dataService.getAllRules(); // Ensure this returns RuleDefinition
        List<RuleResult> results = rulesEngineService.evaluateRules(applicationData, allRules); // Ensure this accepts RuleDefinition

        // Example final decision: "Ran X rules, Y passed"
        int ruleCount = results.size();
        int passedCount = (int) results.stream().filter(r -> r.isPassed()).count();
        String decision = String.format("Ran %d rule(s), %d passed", ruleCount, passedCount);

        applicationData.setFinalDecision(decision);
        dataService.saveApplicationData(applicationData);

        // Redirect back to home
        return "redirect:/home";
    }
}
