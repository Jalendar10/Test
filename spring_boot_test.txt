Project Structure
css
Copy
Edit
my-spring-boot-rules/
├── pom.xml
├── src
│   └── main
│       ├── java
│       │   └── com
│       │       └── example
│       │           └── rulesapp
│       │               ├── RulesAppApplication.java
│       │               ├── DataInitializer.java
│       │               ├── controller
│       │               │   ├── HomeController.java
│       │               │   ├── RulesConfigController.java
│       │               │   ├── RanRulesController.java
│       │               │   └── TestController.java
│       │               ├── model
│       │               │   ├── ApplicationData.java
│       │               │   ├── FieldDefinition.java
│       │               │   ├── RuleDefinition.java
│       │               │   └── RuleResult.java
│       │               ├── repository
│       │               │   ├── ApplicationDataRepository.java
│       │               │   ├── FieldDefinitionRepository.java
│       │               │   └── RuleDefinitionRepository.java
│       │               └── service
│       │                   ├── RulesEngineService.java
│       │                   └── DataService.java
│       └── resources
│           ├── application.properties
│           └── templates
│               ├── home.html
│               ├── createApplication.html
│               ├── rulesConfig.html
│               ├── editRule.html
│               ├── ranrules.html
│               ├── ranrulesDetails.html
│               └── test.html
└── ...
Below is the complete code for each file.

<br/>
1) pom.xml
xml
Copy
Edit
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>my-spring-boot-rules</artifactId>
    <version>1.0.0</version>
    <name>my-spring-boot-rules</name>

    <properties>
        <java.version>1.8</java.version>
        <spring.boot.version>2.6.14</spring.boot.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- Spring Boot Starter Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- Spring Boot Starter Data JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- H2 Database (in-memory) -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok (optional) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
            </plugin>
        </plugins>
    </build>
</project>
<br/>
2) application.properties
properties
Copy
Edit
spring.datasource.url=jdbc:h2:mem:rulesdb;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.hibernate.ddl-auto=update

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
Enables an in-memory H2 DB with a console at /h2-console.

<br/>
3) RulesAppApplication.java
java
Copy
Edit
package com.example.rulesapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RulesAppApplication {
    public static void main(String[] args) {
        SpringApplication.run(RulesAppApplication.class, args);
    }
}
Main entry point.

<br/>
4) DataInitializer.java
On startup, it automatically inserts 30 fields if none exist.

java
Copy
Edit
package com.example.rulesapp;

import com.example.rulesapp.model.FieldDefinition;
import com.example.rulesapp.service.DataService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class DataInitializer implements CommandLineRunner {

    private final DataService dataService;

    public DataInitializer(DataService dataService) {
        this.dataService = dataService;
    }

    @Override
    public void run(String... args) {
        if (!dataService.getAllFields().isEmpty()) {
            return; // Already have fields, skip
        }

        // Insert 30 predefined fields with default values
        dataService.createField(new FieldDefinition("name",           "TEXT",   "John Doe"));
        dataService.createField(new FieldDefinition("age",            "NUMBER", "25"));
        dataService.createField(new FieldDefinition("sales",          "NUMBER", "1000"));
        dataService.createField(new FieldDefinition("volume",         "NUMBER", "50"));
        dataService.createField(new FieldDefinition("product",        "TEXT",   "Sample Product"));
        dataService.createField(new FieldDefinition("location",       "TEXT",   "NY"));
        dataService.createField(new FieldDefinition("phone",          "TEXT",   "1234567890"));
        dataService.createField(new FieldDefinition("email",          "TEXT",   "user@example.com"));
        dataService.createField(new FieldDefinition("creditScore",    "NUMBER", "700"));
        dataService.createField(new FieldDefinition("annualIncome",   "NUMBER", "50000"));
        dataService.createField(new FieldDefinition("monthlyExpenses","NUMBER", "1000"));
        dataService.createField(new FieldDefinition("membershipType", "TEXT",   "Basic"));
        dataService.createField(new FieldDefinition("region",         "TEXT",   "NorthEast"));
        dataService.createField(new FieldDefinition("discount",       "NUMBER", "10"));
        dataService.createField(new FieldDefinition("loyaltyPoints",  "NUMBER", "100"));
        dataService.createField(new FieldDefinition("transactionCount","NUMBER","5"));
        dataService.createField(new FieldDefinition("numberOfDependents","NUMBER","2"));
        dataService.createField(new FieldDefinition("occupation",     "TEXT",   "Engineer"));
        dataService.createField(new FieldDefinition("rating",         "NUMBER", "4"));
        dataService.createField(new FieldDefinition("remarks",        "TEXT",   ""));
        dataService.createField(new FieldDefinition("monthlySavings", "NUMBER", "500"));
        dataService.createField(new FieldDefinition("houseOwnership", "TEXT",   "Rented"));
        dataService.createField(new FieldDefinition("cardType",       "TEXT",   "Silver"));
        dataService.createField(new FieldDefinition("gender",         "TEXT",   "Male"));
        dataService.createField(new FieldDefinition("nationality",    "TEXT",   "American"));
        dataService.createField(new FieldDefinition("maritalStatus",  "TEXT",   "Single"));
        dataService.createField(new FieldDefinition("referenceId",    "TEXT",   "REF123"));
        dataService.createField(new FieldDefinition("productCategory","TEXT",   "Consumer Goods"));
        dataService.createField(new FieldDefinition("salesTarget",    "NUMBER", "2000"));
        dataService.createField(new FieldDefinition("comments",       "TEXT",   "N/A"));
    }
}
<br/>
5) Controller Classes
5.1) HomeController.java
/home → lists existing applications.
/createApplication → shows a form with all fields.
/submitApplication → saves the application, runs the rules, sets a final decision.
java
Copy
Edit
package com.example.rulesapp.controller;

import com.example.rulesapp.model.ApplicationData;
import com.example.rulesapp.model.FieldDefinition;
import com.example.rulesapp.service.DataService;
import com.example.rulesapp.service.RulesEngineService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class HomeController {

    private final DataService dataService;
    private final RulesEngineService rulesEngineService;

    public HomeController(DataService dataService, RulesEngineService rulesEngineService) {
        this.dataService = dataService;
        this.rulesEngineService = rulesEngineService;
    }

    /**
     * Shows all existing applications, plus a link to create a new one.
     */
    @GetMapping({"/", "/home"})
    public String home(Model model) {
        model.addAttribute("applications", dataService.getAllApplications());
        return "home"; // Just a list + link to /createApplication
    }

    /**
     * Displays a form with all fields (using default values).
     */
    @GetMapping("/createApplication")
    public String showCreateApplicationForm(Model model) {
        // Get all FieldDefinitions
        List<FieldDefinition> fields = dataService.getAllFields();
        model.addAttribute("fields", fields);

        // Build map of fieldName -> defaultValue
        Map<String, String> fieldMap = new HashMap<>();
        for (FieldDefinition fd : fields) {
            String defVal = (fd.getDefaultValue() == null) ? "" : fd.getDefaultValue();
            fieldMap.put(fd.getFieldName(), defVal);
        }
        model.addAttribute("fieldMap", fieldMap);

        return "createApplication";
    }

    /**
     * Submits the new application, runs rules, sets final decision, and redirects to /home.
     */
    @PostMapping("/submitApplication")
    public String submitApplication(@RequestParam("fieldNames") String[] fieldNames,
                                    @RequestParam("fieldValues") String[] fieldValues) {
        // Create a fieldName -> fieldValue map
        Map<String, String> appFieldMap = new HashMap<>();
        for (int i = 0; i < fieldNames.length; i++) {
            appFieldMap.put(fieldNames[i], fieldValues[i]);
        }

        // Save the new application
        ApplicationData appData = new ApplicationData(appFieldMap);
        appData = dataService.saveApplicationData(appData);

        // Evaluate rules
        var allRules = dataService.getAllRules();
        var results = rulesEngineService.evaluateRules(appData, allRules);

        // Summaries
        int totalRules = results.size();
        int passedCount = (int) results.stream().filter(r -> r.isPassed()).count();
        int failedCount = totalRules - passedCount;

        String decision = String.format("Ran %d rule(s), Passed %d, Failed %d",
                totalRules, passedCount, failedCount);

        appData.setFinalDecision(decision);
        dataService.saveApplicationData(appData);

        return "redirect:/home";
    }
}
<br/>
5.2) RulesConfigController.java
Manages Fields (CRUD).
Manages Rules (CRUD).
Rule creation is done via dropdown for one field, plus operator, plus a value (a naive single-condition approach).
java
Copy
Edit
package com.example.rulesapp.controller;

import com.example.rulesapp.model.FieldDefinition;
import com.example.rulesapp.model.RuleDefinition;
import com.example.rulesapp.service.DataService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/rulesConfig")
public class RulesConfigController {

    private final DataService dataService;

    public RulesConfigController(DataService dataService) {
        this.dataService = dataService;
    }

    @GetMapping
    public String showConfigPage(Model model) {
        List<FieldDefinition> fields = dataService.getAllFields();
        model.addAttribute("fields", fields);
        model.addAttribute("rules", dataService.getAllRules());
        return "rulesConfig";
    }

    /**
     * Add a new FieldDefinition
     */
    @PostMapping("/addField")
    public String addField(@RequestParam String fieldName,
                           @RequestParam String fieldType,
                           @RequestParam(required = false) String defaultValue) {
        if (defaultValue == null) defaultValue = "";
        FieldDefinition field = new FieldDefinition(fieldName, fieldType, defaultValue);
        dataService.createField(field);
        return "redirect:/rulesConfig";
    }

    /**
     * Add a new RuleDefinition: we combine a selected field, operator, and value
     * into an expression like "age > 18".
     */
    @PostMapping("/addRule")
    public String addRule(@RequestParam String selectedField,
                          @RequestParam String operator,
                          @RequestParam String ruleValue,
                          @RequestParam String description) {
        // Build expression: e.g. "age > 18"
        String expression = selectedField + " " + operator + " " + ruleValue;
        RuleDefinition rule = new RuleDefinition(expression, description);
        dataService.createRule(rule);
        return "redirect:/rulesConfig";
    }

    @GetMapping("/editRule/{id}")
    public String editRuleForm(@PathVariable Long id, Model model) {
        RuleDefinition rule = dataService.getRuleById(id);
        model.addAttribute("rule", rule);
        return "editRule";
    }

    @PostMapping("/updateRule")
    public String updateRule(@RequestParam Long id,
                             @RequestParam String expression,
                             @RequestParam String description) {
        RuleDefinition rule = dataService.getRuleById(id);
        if (rule != null) {
            rule.setExpression(expression);
            rule.setDescription(description);
            dataService.createRule(rule);
        }
        return "redirect:/rulesConfig";
    }
}
<br/>
5.3) RanRulesController.java
/ranrules → lists all applications.
/ranrules/details/{appId} → fetches that specific application, re-runs the rules, and shows results.
java
Copy
Edit
package com.example.rulesapp.controller;

import com.example.rulesapp.model.ApplicationData;
import com.example.rulesapp.model.RuleDefinition;
import com.example.rulesapp.model.RuleResult;
import com.example.rulesapp.service.DataService;
import com.example.rulesapp.service.RulesEngineService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/ranrules")
public class RanRulesController {

    private final DataService dataService;
    private final RulesEngineService rulesEngineService;

    public RanRulesController(DataService dataService, RulesEngineService rulesEngineService) {
        this.dataService = dataService;
        this.rulesEngineService = rulesEngineService;
    }

    @GetMapping
    public String viewRanRules(Model model) {
        model.addAttribute("applications", dataService.getAllApplications());
        return "ranrules";
    }

    @GetMapping("/details/{appId}")
    public String viewRuleDetails(@PathVariable Long appId, Model model) {
        ApplicationData application = dataService.getApplicationById(appId);
        if (application == null) {
            model.addAttribute("error", "Application not found.");
            return "ranrules";
        }

        // Evaluate all rules
        List<RuleDefinition> allRules = dataService.getAllRules();
        List<RuleResult> results = rulesEngineService.evaluateRules(application, allRules);

        // Summaries
        int totalRules = results.size();
        int passedCount = (int) results.stream().filter(r -> r.isPassed()).count();
        int failedCount = totalRules - passedCount;

        // Put the details in the model
        model.addAttribute("application", application);
        model.addAttribute("results", results);
        model.addAttribute("totalRules", totalRules);
        model.addAttribute("passedCount", passedCount);
        model.addAttribute("failedCount", failedCount);

        return "ranrulesDetails";
    }
}
<br/>
5.4) TestController.java
Basic REST endpoint to confirm the application is running.

java
Copy
Edit
package com.example.rulesapp.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TestController {

    @GetMapping("/test")
    public String test() {
        return "Test endpoint is working!";
    }
}
<br/>
6) Model Classes
6.1) ApplicationData.java
java
Copy
Edit
package com.example.rulesapp.model;

import javax.persistence.*;
import java.util.Map;

@Entity
public class ApplicationData {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ElementCollection
    private Map<String, String> fieldValues; // e.g. {"age":"25", "sales":"1000"}

    private String finalDecision; // e.g. "Ran 3 rule(s), Passed 2, Failed 1"

    public ApplicationData() {
    }

    public ApplicationData(Map<String, String> fieldValues) {
        this.fieldValues = fieldValues;
    }

    public Long getId() {
        return id;
    }

    public Map<String, String> getFieldValues() {
        return fieldValues;
    }

    public void setFieldValues(Map<String, String> fieldValues) {
        this.fieldValues = fieldValues;
    }

    public String getFinalDecision() {
        return finalDecision;
    }

    public void setFinalDecision(String finalDecision) {
        this.finalDecision = finalDecision;
    }
}
<br/>
6.2) FieldDefinition.java
java
Copy
Edit
package com.example.rulesapp.model;

import javax.persistence.*;

@Entity
public class FieldDefinition {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String fieldName;     // e.g. "age", "sales"
    private String fieldType;     // e.g. "NUMBER", "TEXT"
    private String defaultValue;  // e.g. "0"

    public FieldDefinition() {
    }

    public FieldDefinition(String fieldName, String fieldType, String defaultValue) {
        this.fieldName = fieldName;
        this.fieldType = fieldType;
        this.defaultValue = defaultValue;
    }

    public Long getId() {
        return id;
    }

    public String getFieldName() {
        return fieldName;
    }

    public void setFieldName(String fieldName) {
        this.fieldName = fieldName;
    }

    public String getFieldType() {
        return fieldType;
    }

    public void setFieldType(String fieldType) {
        this.fieldType = fieldType;
    }

    public String getDefaultValue() {
        return defaultValue;
    }

    public void setDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
    }
}
<br/>
6.3) RuleDefinition.java
java
Copy
Edit
package com.example.rulesapp.model;

import javax.persistence.*;

@Entity
public class RuleDefinition {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Expression like "age > 18" or "sales >= 500".
     * For multiple conditions, you'd need a more advanced parser or logic.
     */
    private String expression;

    private String description;

    public RuleDefinition() {
    }

    public RuleDefinition(String expression, String description) {
        this.expression = expression;
        this.description = description;
    }

    public Long getId() {
        return id;
    }

    public String getExpression() {
        return expression;
    }

    public void setExpression(String expression) {
        this.expression = expression;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}
<br/>
6.4) RuleResult.java
java
Copy
Edit
package com.example.rulesapp.model;

public class RuleResult {

    private Long ruleId;
    private String ruleDescription;
    private boolean passed;
    private String message;

    public RuleResult(Long ruleId, String ruleDescription, boolean passed, String message) {
        this.ruleId = ruleId;
        this.ruleDescription = ruleDescription;
        this.passed = passed;
        this.message = message;
    }

    public Long getRuleId() {
        return ruleId;
    }

    public String getRuleDescription() {
        return ruleDescription;
    }

    public boolean isPassed() {
        return passed;
    }

    public String getMessage() {
        return message;
    }
}
<br/>
7) Repository Interfaces
7.1) ApplicationDataRepository.java
java
Copy
Edit
package com.example.rulesapp.repository;

import com.example.rulesapp.model.ApplicationData;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ApplicationDataRepository extends JpaRepository<ApplicationData, Long> {
}
7.2) FieldDefinitionRepository.java
java
Copy
Edit
package com.example.rulesapp.repository;

import com.example.rulesapp.model.FieldDefinition;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FieldDefinitionRepository extends JpaRepository<FieldDefinition, Long> {
}
7.3) RuleDefinitionRepository.java
java
Copy
Edit
package com.example.rulesapp.repository;

import com.example.rulesapp.model.RuleDefinition;
import org.springframework.data.jpa.repository.JpaRepository;

public interface RuleDefinitionRepository extends JpaRepository<RuleDefinition, Long> {
}
<br/>
8) Service Classes
8.1) DataService.java
Manages CRUD for fields, rules, and applications.

java
Copy
Edit
package com.example.rulesapp.service;

import com.example.rulesapp.model.ApplicationData;
import com.example.rulesapp.model.FieldDefinition;
import com.example.rulesapp.model.RuleDefinition;
import com.example.rulesapp.repository.ApplicationDataRepository;
import com.example.rulesapp.repository.FieldDefinitionRepository;
import com.example.rulesapp.repository.RuleDefinitionRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DataService {

    private final FieldDefinitionRepository fieldRepo;
    private final RuleDefinitionRepository ruleRepo;
    private final ApplicationDataRepository appRepo;

    public DataService(FieldDefinitionRepository fieldRepo,
                       RuleDefinitionRepository ruleRepo,
                       ApplicationDataRepository appRepo) {
        this.fieldRepo = fieldRepo;
        this.ruleRepo = ruleRepo;
        this.appRepo = appRepo;
    }

    // Fields
    public List<FieldDefinition> getAllFields() {
        return fieldRepo.findAll();
    }

    public FieldDefinition createField(FieldDefinition fieldDefinition) {
        return fieldRepo.save(fieldDefinition);
    }

    // Rules
    public List<RuleDefinition> getAllRules() {
        return ruleRepo.findAll();
    }

    public RuleDefinition createRule(RuleDefinition ruleDefinition) {
        return ruleRepo.save(ruleDefinition);
    }

    public RuleDefinition getRuleById(Long id) {
        return ruleRepo.findById(id).orElse(null);
    }

    // Applications
    public ApplicationData saveApplicationData(ApplicationData applicationData) {
        return appRepo.save(applicationData);
    }

    public List<ApplicationData> getAllApplications() {
        return appRepo.findAll();
    }

    public ApplicationData getApplicationById(Long id) {
        return appRepo.findById(id).orElse(null);
    }
}
<br/>
8.2) RulesEngineService.java
Evaluates rules. We added a very naive parser that only supports single-operator expressions (e.g. "age > 18"). For multiple conditions (e.g. "age>20 AND age<19 OR age=18"), you need a more advanced approach.

java
Copy
Edit
package com.example.rulesapp.service;

import com.example.rulesapp.model.ApplicationData;
import com.example.rulesapp.model.RuleDefinition;
import com.example.rulesapp.model.RuleResult;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
public class RulesEngineService {

    public List<RuleResult> evaluateRules(ApplicationData applicationData, List<RuleDefinition> rules) {
        Map<String, String> fieldValues = applicationData.getFieldValues();
        List<RuleResult> results = new ArrayList<>();

        for (RuleDefinition rule : rules) {
            boolean passed = evaluateExpression(rule.getExpression(), fieldValues);
            String message = passed ? "Rule Passed" : "Rule Failed";

            results.add(new RuleResult(
                    rule.getId(),
                    rule.getDescription(),
                    passed,
                    message
            ));
        }
        return results;
    }

    /**
     * Splits a string like "age > 18" into [fieldName, operator, ruleValue],
     * compares numeric values if possible.
     */
    private boolean evaluateExpression(String expression, Map<String, String> fieldValues) {
        if (expression == null || expression.trim().isEmpty()) {
            return false;
        }
        try {
            String[] parts = expression.split(" ");
            if (parts.length == 3) {
                String fieldName = parts[0];
                String operator = parts[1];
                String thresholdStr = parts[2];

                String actualValueStr = fieldValues.get(fieldName);
                if (actualValueStr == null) {
                    return false; // field not provided => fail
                }

                double actualVal = Double.parseDouble(actualValueStr);
                double thresholdVal = Double.parseDouble(thresholdStr);

                switch (operator) {
                    case ">":
                        return actualVal > thresholdVal;
                    case ">=":
                        return actualVal >= thresholdVal;
                    case "<":
                        return actualVal < thresholdVal;
                    case "<=":
                        return actualVal <= thresholdVal;
                    case "==":
                        return actualVal == thresholdVal;
                    default:
                        return false;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return false;
    }
}
<br/>
9) Thymeleaf Templates
9.1) home.html
Lists existing applications and a button to go to /createApplication.

html
Copy
Edit
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Home - Rules App</title>
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        body {
            margin: 20px;
        }
        .app-item {
            margin-bottom: 8px;
        }
        .decision {
            font-style: italic;
            color: #555;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Rules App - Home</h1>
    <hr/>

    <div class="mb-3">
        <a class="btn btn-primary" href="/createApplication">Create New Application</a>
        <a class="btn btn-secondary" href="/rulesConfig">Manage Fields/Rules</a>
        <a class="btn btn-info" href="/ranrules">Check Run Rules</a>
        <a class="btn btn-outline-success" href="/test">Test Endpoint</a>
    </div>

    <h2>Existing Applications</h2>
    <div>
        <div th:each="app : ${applications}" class="app-item">
            <strong>ID:</strong> <span th:text="${app.id}"></span> |
            <span class="decision" th:text="${app.finalDecision}"></span>
        </div>
        <div th:if="${applications.size() == 0}">
            No applications found.
        </div>
    </div>
</div>
</body>
</html>
<br/>
9.2) createApplication.html
A form listing all fields with default values. Submits to /submitApplication.

html
Copy
Edit
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Create Application</title>
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        body {
            margin: 20px;
        }
        .field-group {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Create New Application</h1>
    <hr/>

    <form action="/submitApplication" method="post">
        <div th:each="field : ${fields}" class="field-group">
            <label th:text="${field.fieldName} + ' (' + field.fieldType + ')'"></label>
            <input type="hidden" name="fieldNames" th:value="${field.fieldName}"/>
            <input type="text" class="form-control"
                   name="fieldValues"
                   th:value="${fieldMap[field.fieldName]}"/>
        </div>
        <button class="btn btn-primary" type="submit">Submit Application</button>
        <a class="btn btn-secondary" href="/home">Cancel</a>
    </form>
</div>
</body>
</html>
<br/>
9.3) rulesConfig.html
Lists existing fields (ID, name, type, default value).
Lets you add a new field.
Lists existing rules.
Lets you add a new rule with dropdowns for field + operator, plus a text box for the value, plus a description.
html
Copy
Edit
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Rules Config</title>
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        body { margin: 20px; }
        .block { margin-bottom: 30px; }
    </style>
</head>
<body>
<div class="container">
    <h1>Rules Configuration</h1>
    <hr/>

    <div class="block">
        <h2>Existing Fields</h2>
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>ID</th>
                <th>Field Name</th>
                <th>Field Type</th>
                <th>Default Value</th>
            </tr>
            </thead>
            <tbody>
            <tr th:each="field : ${fields}">
                <td th:text="${field.id}"></td>
                <td th:text="${field.fieldName}"></td>
                <td th:text="${field.fieldType}"></td>
                <td th:text="${field.defaultValue}"></td>
            </tr>
            </tbody>
        </table>
    </div>

    <div class="block">
        <h3>Add Field</h3>
        <form action="/rulesConfig/addField" method="post" class="row g-3">
            <div class="col-md-3">
                <label>Field Name</label>
                <input class="form-control" type="text" name="fieldName" required/>
            </div>
            <div class="col-md-3">
                <label>Field Type</label>
                <input class="form-control" type="text" name="fieldType"
                       placeholder="TEXT, NUMBER, etc."/>
            </div>
            <div class="col-md-3">
                <label>Default Value</label>
                <input class="form-control" type="text" name="defaultValue"/>
            </div>
            <div class="col-md-3 align-self-end">
                <button class="btn btn-primary" type="submit">Add Field</button>
            </div>
        </form>
    </div>

    <hr/>
    <div class="block">
        <h2>Existing Rules</h2>
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Rule ID</th>
                <th>Expression</th>
                <th>Description</th>
                <th>Edit</th>
            </tr>
            </thead>
            <tbody>
            <tr th:each="rule : ${rules}">
                <td th:text="${rule.id}"></td>
                <td th:text="${rule.expression}"></td>
                <td th:text="${rule.description}"></td>
                <td>
                    <a class="btn btn-sm btn-info" 
                       th:href="@{|/rulesConfig/editRule/${rule.id}|}">
                        Edit
                    </a>
                </td>
            </tr>
            </tbody>
        </table>
    </div>

    <div class="block">
        <h3>Add Rule</h3>
        <form action="/rulesConfig/addRule" method="post" class="row g-3">

            <!-- Field dropdown -->
            <div class="col-md-3">
                <label>Field</label>
                <select name="selectedField" class="form-control">
                    <option th:each="f : ${fields}"
                            th:value="${f.fieldName}"
                            th:text="${f.fieldName}"></option>
                </select>
            </div>

            <!-- Operator dropdown -->
            <div class="col-md-2">
                <label>Operator</label>
                <select name="operator" class="form-control">
                    <option value=">">&gt;</option>
                    <option value=">=">&gt;=</option>
                    <option value="<">&lt;</option>
                    <option value="<=">&lt;=</option>
                    <option value="==">==</option>
                </select>
            </div>

            <!-- Value input -->
            <div class="col-md-2">
                <label>Value</label>
                <input class="form-control" type="text" name="ruleValue"/>
            </div>

            <!-- Description -->
            <div class="col-md-3">
                <label>Description</label>
                <input class="form-control" type="text" name="description"/>
            </div>

            <div class="col-md-2 align-self-end">
                <button class="btn btn-primary" type="submit">Add Rule</button>
            </div>

        </form>
    </div>

    <hr/>
    <a class="btn btn-secondary" href="/home">Back to Home</a>
</div>
</body>
</html>
<br/>
9.4) editRule.html
Allows editing an existing rule’s raw expression & description.

html
Copy
Edit
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Edit Rule</title>
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        body { margin: 20px; }
    </style>
</head>
<body>
<div class="container">
    <h1>Edit Rule</h1>
    <hr/>

    <div th:if="${rule == null}">
        <p>Rule not found.</p>
        <a class="btn btn-secondary" href="/rulesConfig">Back</a>
    </div>

    <div th:if="${rule != null}">
        <form th:action="@{/rulesConfig/updateRule}" method="post">
            <input type="hidden" name="id" th:value="${rule.id}" />

            <div class="mb-3">
                <label>Expression</label>
                <input class="form-control" type="text" name="expression"
                       th:value="${rule.expression}" required/>
            </div>

            <div class="mb-3">
                <label>Description</label>
                <input class="form-control" type="text" name="description"
                       th:value="${rule.description}" />
            </div>

            <button class="btn btn-primary" type="submit">Update Rule</button>
            <a class="btn btn-secondary" href="/rulesConfig">Cancel</a>
        </form>
    </div>
</div>
</body>
</html>
<br/>
9.5) ranrules.html
Lists all applications, with a link to “View Details” for each.

html
Copy
Edit
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Ran Rules</title>
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        body { margin: 20px; }
    </style>
</head>
<body>
<div class="container">
    <h1>Ran Rules Page</h1>
    <hr/>

    <h2>All Applications</h2>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Application ID</th>
            <th>Final Decision</th>
            <th>Details</th>
        </tr>
        </thead>
        <tbody>
        <tr th:each="app : ${applications}">
            <td th:text="${app.id}"></td>
            <td th:text="${app.finalDecision}"></td>
            <td>
                <a class="btn btn-sm btn-info"
                   th:href="@{|/ranrules/details/${app.id}|}">
                    View Details
                </a>
            </td>
        </tr>
        </tbody>
    </table>

    <a class="btn btn-secondary" href="/home">Back to Home</a>
</div>
</body>
</html>
<br/>
9.6) ranrulesDetails.html
Shows the results of each rule for the chosen application, plus a summary: “Ran X rules, Passed Y, Failed Z”.

html
Copy
Edit
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Rule Details</title>
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        body { margin: 20px; }
        .passed {
            color: green;
            font-weight: bold;
        }
        .failed {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Rule Evaluation Results</h1>
    <hr/>

    <div th:if="${error}">
        <p th:text="${error}"></p>
        <a class="btn btn-secondary" href="/ranrules">Back</a>
    </div>

    <div th:if="${application != null}">
        <p>Application ID:
            <strong th:text="${application.id}"></strong>
        </p>
        <p>Final Decision:
            <strong th:text="${application.finalDecision}"></strong>
        </p>

        <!-- Summary: total, passed, failed -->
        <p>
            <strong>Ran</strong> <span th:text="${totalRules}"></span> 
            <strong>rule(s), Passed</strong> <span th:text="${passedCount}"></span>, 
            <strong>Failed</strong> <span th:text="${failedCount}"></span>
        </p>

        <h3>Rule Results</h3>
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Rule ID</th>
                <th>Description</th>
                <th>Passed</th>
                <th>Message</th>
            </tr>
            </thead>
            <tbody>
            <tr th:each="r : ${results}">
                <td th:text="${r.ruleId}"></td>
                <td th:text="${r.ruleDescription}"></td>
                <td th:classappend="${r.passed} ? 'passed' : 'failed'"
                    th:text="${r.passed} ? 'Yes' : 'No'"></td>
                <td th:text="${r.message}"></td>
            </tr>
            </tbody>
        </table>

        <a class="btn btn-secondary" href="/ranrules">Back</a>
    </div>
</div>
</body>
</html>
<br/>
9.7) test.html (Optional)
html
Copy
Edit
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Test Page</title>
</head>
<body>
<h1>Test Page</h1>
<p>Use this page for any manual testing or debugging if needed.</p>
</body>
</html>
<br/>
How to Run
Build:
bash
Copy
Edit
mvn clean install
Start the application:
bash
Copy
Edit
mvn spring-boot:run
Open your browser:
http://localhost:8080/home – see existing applications, link to “Create New Application”
http://localhost:8080/createApplication – fill out the 30 fields, submit
http://localhost:8080/rulesConfig – manage fields & rules
Notice “Add Rule” has a dropdown for existing fields, another for operators, plus a text value
http://localhost:8080/ranrules – see all applications, “View Details” runs the rules again, showing pass/fail
http://localhost:8080/test – simple test endpoint
http://localhost:8080/h2-console – H2 DB console (username sa, no password)
When you create a new application, it runs all rules, sets finalDecision (like “Ran 2 rule(s), Passed 1, Failed 1”).
When you view details for a specific application, you see exactly the pass/fail results for that application.

Summary
The “View Details” page is specific to each application.id (no overlap).
It shows how many rules were run, how many passed, how many failed, and each rule’s pass/fail.
The “Add Rule” form includes a dropdown for fields and operators, building a single-condition expression (e.g. “age > 20”).
If you need multiple conditions (age > 20 AND age < 19 OR age = 18), you must expand the parser or store multiple sub-rules.
This should satisfy your requirements:

View details is specific to each application ID.
Summaries include passed / failed counts.
A dropdown to select a field when creating a rule.
The entire code is updated to reflect these changes. Enjoy!
